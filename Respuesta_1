# üì± Evaluaci√≥n T√©cnica: An√°lisis y Mejora de Seguridad en Aplicaci√≥n Android

## üìå Introducci√≥n

Esta evaluaci√≥n t√©cnica se basa en una aplicaci√≥n Android que implementa un sistema de demostraci√≥n de permisos y protecci√≥n de datos. La aplicaci√≥n utiliza tecnolog√≠as modernas como **Kotlin**, **Android Security Crypto**, **SQLCipher** y patrones de arquitectura **MVVM**.

---

## üõ°Ô∏è Parte 1: An√°lisis de Seguridad B√°sico (0‚Äì7 puntos)

### üîç 1.1 Identificaci√≥n de Vulnerabilidades (2 puntos)

**Archivo analizado:** `DataProtectionManager.kt`

- **¬øQu√© m√©todo de encriptaci√≥n se utiliza para proteger datos sensibles?**  
  `AES-256-GCM`

- **Posibles vulnerabilidades en el sistema de logging:**
  1. Los logs no est√°n cifrados ni protegidos, lo que permite que servicios externos o usuarios con acceso al dispositivo puedan leer informaci√≥n sensible.
  2. Los mensajes de log son demasiado expl√≠citos, lo que facilita a un atacante detectar puntos d√©biles o flujos cr√≠ticos en la aplicaci√≥n.

- **¬øQu√© sucede si falla la inicializaci√≥n del sistema de encriptaci√≥n?**  
  El `DataProtectionManager` se inicializa de forma perezosa (lazy). Si ocurre un error durante la inicializaci√≥n y este no es manejado, la aplicaci√≥n podr√≠a cerrarse inesperadamente (`crash`) o funcionar incorrectamente, sin mostrar errores visibles al usuario final.

---

### üîê 1.2 Permisos y Manifiesto (2 puntos)

**Archivos analizados:** `AndroidManifest.xml`, `MainActivity.kt`

- **Permisos peligrosos declarados en el manifiesto:**

```xml
<uses-permission android:name="android.permission.READ_CONTACTS" />
<uses-permission android:name="android.permission.CALL_PHONE" />
<uses-permission android:name="android.permission.SEND_SMS" />

- **¬øQu√© patr√≥n se utiliza para solicitar permisos en runtime?**
  Se utiliza el que recomienda google para este tipo de aplicaciones:
   `Activity Result API (registerForActivityResult con RequestPermission())`
  En este extracto:
```xml
permission.status = if (isGranted) PermissionStatus.GRANTED else PermissionStatus.DENIED
        permissionsAdapter.updatePermissionStatus(permission)
        
        val status = if (isGranted) "OTORGADO" else "DENEGADO"
        dataProtectionManager.logAccess("PERMISSION", "${permission.name}: $status")
        
        if (isGranted) {
            openActivity(permission)
        }
        currentRequestedPermission = null
    }
}


- **Identifica qu√© configuraci√≥n de seguridad previene backups autom√°ticos**

```xml
<application
    android:name=".PermissionsApplication"
    `android:allowBackup="false" `
    android:dataExtractionRules="@xml/data_extraction_rules"
    android:fullBackupContent="@xml/backup_rules"
    android:icon="@mipmap/ic_launcher"
    android:label="@string/app_name"
    android:roundIcon="@mipmap/ic_launcher_round"
    android:supportsRtl="true"
    android:theme="@style/Theme.Seguridad_priv_a">

La l√≠nea resaltada evita que Android respalde autom√°ticamente datos de la aplicaci√≥n 
(por ejemplo, configuraciones, archivos locales o credenciales) en servicios como Google Drive.

---

### üñºÔ∏è 1.3 Gesti√≥n de Archivos (3 puntos)

**Archivos analizados:** `AndroidManifest.xml`, `MainActivity.kt`

- **Permisos peligrosos declarados en el manifiesto:**
